{"version":3,"sources":["webpack:///./Modules/Reports/Containers/profit-table.jsx"],"names":["ProfitTable","getRowAction","row_obj","getSupportedContracts","Shortcode","extractInfoFromShortcode","shortcode","category","toUpperCase","getContractPath","contract_id","component","react_default","a","createElement","localize","i18n_default_text","values","website_name","components","key","className","rel","target","href","urlFor","undefined","React","Component","this","props","onMount","onUnmount","_this$props","component_icon","currency","data","date_from","date_to","is_empty","is_loading","error","handleDateChange","handleScroll","has_selected_date","totals","filter_component","Fragment","composite_calendar","onChange","from","to","columns","getProfitTableColumnsTemplate","length","reports_meta","i18n_heading","i18n_message","placeholder_component","empty_message_component","EmptyTradeHistoryMessage","localized_message","localized_period_message","DataTable","data_source","onScroll","footer","propTypes","PropTypes","string","MobxPropTypes","arrayOrObservableArray","number","func","bool","history","object","connect","_ref","modules","client","profit_table","withRouter"],"mappings":"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","file":"js/profit_table.7948c5f58d45b7845a6b.js","sourcesContent":["import PropTypes                         from 'prop-types';\nimport { PropTypes as MobxPropTypes }    from 'mobx-react';\nimport React                             from 'react';\nimport { withRouter }                    from 'react-router';\nimport { localize }                      from 'App/i18n';\nimport { urlFor }                        from '_common/url';\nimport { website_name }                  from 'App/Constants/app-config';\nimport DataTable                         from 'App/Components/Elements/DataTable';\nimport Localize                          from 'App/Components/Elements/localize.jsx';\nimport CompositeCalendar                 from 'App/Components/Form/CompositeCalendar';\nimport { getContractPath }               from 'App/Components/Routes/helpers';\nimport { getSupportedContracts }         from 'Constants';\nimport { connect }                       from 'Stores/connect';\nimport EmptyTradeHistoryMessage          from '../Components/empty-trade-history-message.jsx';\nimport PlaceholderComponent              from '../Components/placeholder-component.jsx';\nimport { ReportsMeta }                   from '../Components/reports-meta.jsx';\nimport { getProfitTableColumnsTemplate } from '../Constants/data-table-constants';\nimport Shortcode                         from '../Helpers/shortcode';\n\nclass ProfitTable extends React.Component {\n    componentDidMount() {\n        this.props.onMount();\n    }\n\n    componentWillUnmount() {\n        this.props.onUnmount();\n    }\n\n    getRowAction = (row_obj) => (\n        getSupportedContracts()[Shortcode.extractInfoFromShortcode(row_obj.shortcode).category.toUpperCase()] ?\n            getContractPath(row_obj.contract_id)\n            : {\n                component: (\n                    <Localize\n                        i18n_default_text='This trade type is currently not supported on {{website_name}}. Please go to <0>Binary.com</0> for details.'\n                        values={{\n                            website_name,\n                        }}\n                        components={[\n                            <a key={0} className='link link--orange' rel='noopener noreferrer' target='_blank' href={urlFor('user/profit_tablews', undefined, undefined, true)} />,\n                        ]}\n                    />\n                ),\n            }\n    );\n\n    render () {\n        const {\n            component_icon,\n            currency,\n            data,\n            date_from,\n            date_to,\n            is_empty,\n            is_loading,\n            error,\n            handleDateChange,\n            handleScroll,\n            has_selected_date,\n            totals,\n        } = this.props;\n        if (error) return <p>{error}</p>;\n\n        const filter_component = (\n            <React.Fragment>\n                <CompositeCalendar\n                    onChange={handleDateChange}\n                    from={date_from}\n                    to={date_to}\n                />\n            </React.Fragment>\n        );\n        const columns = getProfitTableColumnsTemplate(currency, data.length);\n\n        return (\n            <React.Fragment>\n                <ReportsMeta\n                    i18n_heading={localize('Profit table')}\n                    i18n_message={localize('View all trades purchased on your account, and a summary of your total profit/loss.')}\n                    filter_component={filter_component}\n                />\n                { (is_loading && data.length === 0) || is_empty ?\n                    <PlaceholderComponent\n                        is_loading={is_loading}\n                        has_selected_date={has_selected_date}\n                        is_empty={is_empty}\n                        empty_message_component={EmptyTradeHistoryMessage}\n                        component_icon={component_icon}\n                        localized_message={localize('You have no trading activity yet.')}\n                        localized_period_message={localize('You have no trading activity for this period.')}\n                    />\n                    :\n                    <DataTable\n                        className='profit-table'\n                        data_source={data}\n                        columns={columns}\n                        onScroll={handleScroll}\n                        footer={totals}\n                        is_empty={is_empty}\n                        getRowAction={this.getRowAction}\n                    >\n                        <PlaceholderComponent\n                            is_loading={is_loading}\n                        />\n                    </DataTable>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nProfitTable.propTypes = {\n    component_icon   : PropTypes.string,\n    currency         : PropTypes.string,\n    data             : MobxPropTypes.arrayOrObservableArray,\n    date_from        : PropTypes.number,\n    date_to          : PropTypes.number,\n    error            : PropTypes.string,\n    handleDateChange : PropTypes.func,\n    handleScroll     : PropTypes.func,\n    has_selected_date: PropTypes.bool,\n    history          : PropTypes.object,\n    is_empty         : PropTypes.bool,\n    is_loading       : PropTypes.bool,\n    onMount          : PropTypes.func,\n    onUnmount        : PropTypes.func,\n    totals           : PropTypes.object,\n};\n\nexport default connect(\n    ({ modules, client }) => ({\n        currency         : client.currency,\n        data             : modules.profit_table.data,\n        date_from        : modules.profit_table.date_from,\n        date_to          : modules.profit_table.date_to,\n        error            : modules.profit_table.error,\n        handleScroll     : modules.profit_table.handleScroll,\n        handleDateChange : modules.profit_table.handleDateChange,\n        has_selected_date: modules.profit_table.has_selected_date,\n        is_empty         : modules.profit_table.is_empty,\n        is_loading       : modules.profit_table.is_loading,\n        onMount          : modules.profit_table.onMount,\n        onUnmount        : modules.profit_table.onUnmount,\n        totals           : modules.profit_table.totals,\n    })\n)(withRouter(ProfitTable));\n"],"sourceRoot":""}