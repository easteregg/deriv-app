{"version":3,"sources":["webpack:///./App/Containers/Routes/routes.jsx"],"names":["__webpack_require__","r","__webpack_exports__","mobx_react__WEBPACK_IMPORTED_MODULE_0__","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","n","react__WEBPACK_IMPORTED_MODULE_2__","react__WEBPACK_IMPORTED_MODULE_2___default","react_router__WEBPACK_IMPORTED_MODULE_3__","App_Components_Elements_Errors__WEBPACK_IMPORTED_MODULE_4__","App_Components_Routes__WEBPACK_IMPORTED_MODULE_5__","Stores_connect__WEBPACK_IMPORTED_MODULE_6__","Routes","props","has_error","a","createElement","error","is_logged_in","propTypes","MobxPropTypes","objectOrObservableObject","PropTypes","bool","withRouter","connect","_ref","client","common"],"mappings":"wGAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,IAAAI,EAAAJ,EAAA,GAAAK,EAAAL,EAAAM,EAAAF,GAAAG,EAAAP,EAAA,GAAAQ,EAAAR,EAAAM,EAAAC,GAAAE,EAAAT,EAAA,IAAAU,EAAAV,EAAA,KAAAW,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,IAQMa,EAAS,SAACC,GACZ,OAAIA,EAAMC,UACCP,EAAAQ,EAAAC,cAACP,EAAA,EAAmBI,EAAMI,OAG9BV,EAAAQ,EAAAC,cAACN,EAAA,EAAD,CAAcQ,aAAcL,EAAMK,gBAG7CN,EAAOO,UAAY,CACfF,MAAcG,YAAcC,yBAC5BP,UAAcQ,IAAUC,KACxBL,aAAcI,IAAUC,MAKbC,sBAAWC,YACtB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,OAAQC,EAAXF,EAAWE,OAAX,MAAyB,CACrBV,aAAcS,EAAOT,aACrBD,MAAcW,EAAOX,MACrBH,UAAcc,EAAOd,YAJHW,CAMxBb","file":"js/module-routes.7948c5f58d45b7845a6b.js","sourcesContent":["import { PropTypes as MobxPropTypes } from 'mobx-react';\nimport PropTypes                      from 'prop-types';\nimport React                          from 'react';\nimport { withRouter }                 from 'react-router';\nimport ErrorComponent                 from 'App/Components/Elements/Errors';\nimport BinaryRoutes                   from 'App/Components/Routes';\nimport { connect }                    from 'Stores/connect';\n\nconst Routes = (props) => {\n    if (props.has_error) {\n        return <ErrorComponent {...props.error} />;\n    }\n\n    return <BinaryRoutes is_logged_in={props.is_logged_in} />;\n};\n\nRoutes.propTypes = {\n    error       : MobxPropTypes.objectOrObservableObject,\n    has_error   : PropTypes.bool,\n    is_logged_in: PropTypes.bool,\n};\n\n// need to wrap withRouter around connect\n// to prevent updates on <BinaryRoutes /> from being blocked\nexport default withRouter(connect(\n    ({ client, common }) => ({\n        is_logged_in: client.is_logged_in,\n        error       : common.error,\n        has_error   : common.has_error,\n    })\n)(Routes));\n"],"sourceRoot":""}