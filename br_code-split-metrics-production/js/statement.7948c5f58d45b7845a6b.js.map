{"version":3,"sources":["webpack:///./Modules/Reports/Containers/statement.jsx"],"names":["Statement","getRowAction","row_obj","action","id","includes","action_type","getSupportedContracts","Shortcode","extractInfoFromShortcode","shortcode","category","toUpperCase","getContractPath","component","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","App_Components_Elements_localize_jsx__WEBPACK_IMPORTED_MODULE_7__","i18n_default_text","values","website_name","components","key","className","rel","target","href","urlFor","undefined","message","desc","React","Component","this","props","onMount","onUnmount","_this2","_this$props","component_icon","currency","data","date_from","date_to","is_empty","is_loading","error","handleScroll","handleDateChange","has_selected_date","columns","getStatementTableColumnsTemplate","filter_component","Fragment","App_Components_Form_CompositeCalendar_composite_calendar_jsx__WEBPACK_IMPORTED_MODULE_8__","onChange","from","to","_Components_reports_meta_jsx__WEBPACK_IMPORTED_MODULE_15__","i18n_heading","localize","i18n_message","length","_Components_placeholder_component_jsx__WEBPACK_IMPORTED_MODULE_14__","empty_message_component","EmptyTradeHistoryMessage","localized_message","localized_period_message","App_Components_Elements_DataTable__WEBPACK_IMPORTED_MODULE_6__","data_source","onScroll","row","propTypes","PropTypes","string","MobxPropTypes","arrayOrObservableArray","number","func","bool","history","object","connect","_ref","modules","client","statement","withRouter"],"mappings":"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","file":"js/statement.7948c5f58d45b7845a6b.js","sourcesContent":["import { PropTypes as MobxPropTypes }       from 'mobx-react';\nimport PropTypes                            from 'prop-types';\nimport React                                from 'react';\nimport { withRouter }                       from 'react-router-dom';\nimport { localize }                         from 'App/i18n';\nimport { urlFor }                           from '_common/url';\nimport DataTable                            from 'App/Components/Elements/DataTable';\nimport Localize                             from 'App/Components/Elements/localize.jsx';\nimport CompositeCalendar                    from 'App/Components/Form/CompositeCalendar/composite-calendar.jsx';\nimport { getContractPath }                  from 'App/Components/Routes/helpers';\nimport { website_name }                     from 'App/Constants/app-config';\nimport { getSupportedContracts }            from 'Constants';\nimport { connect }                          from 'Stores/connect';\nimport { getStatementTableColumnsTemplate } from '../Constants/data-table-constants';\nimport PlaceholderComponent                 from '../Components/placeholder-component.jsx';\nimport { ReportsMeta }                      from '../Components/reports-meta.jsx';\nimport EmptyTradeHistoryMessage             from '../Components/empty-trade-history-message.jsx';\nimport Shortcode                            from '../Helpers/shortcode';\n\nclass Statement extends React.Component {\n    componentDidMount() {\n        this.props.onMount();\n    }\n\n    componentWillUnmount() {\n        this.props.onUnmount();\n    }\n\n    getRowAction = (row_obj) => {\n        let action;\n\n        if (row_obj.id && ['buy', 'sell'].includes(row_obj.action_type)) {\n            action = getSupportedContracts()[\n                Shortcode.extractInfoFromShortcode(row_obj.shortcode).category.toUpperCase()\n            ]\n                ? getContractPath(row_obj.id)\n                : {\n                    component: (\n                        <Localize\n                            i18n_default_text='This trade type is currently not supported on {{website_name}}. Please go to <0>Binary.com</0> for details.'\n                            values={{\n                                website_name,\n                            }}\n                            components={[\n                                <a key={0} className='link link--orange' rel='noopener noreferrer' target='_blank' href={urlFor('user/statementws', undefined, undefined, true)} />,\n                            ]}\n                        />\n                    ),\n                };\n        } else if (['deposit', 'withdrawal'].includes(row_obj.action_type)) {\n            action = {\n                message: row_obj.desc,\n            };\n        }\n\n        return action;\n    };\n\n    render() {\n        const {\n            component_icon,\n            currency,\n            data,\n            date_from,\n            date_to,\n            is_empty,\n            is_loading,\n            error,\n            handleScroll,\n            handleDateChange,\n            has_selected_date,\n        } = this.props;\n\n        if (error) return <p>{error}</p>;\n\n        const columns = getStatementTableColumnsTemplate(currency);\n        const filter_component = (\n            <React.Fragment>\n                <CompositeCalendar\n                    onChange={handleDateChange}\n                    from={date_from}\n                    to={date_to}\n                />\n            </React.Fragment>\n        );\n        return (\n            <React.Fragment>\n                <ReportsMeta\n                    i18n_heading={localize('Statement')}\n                    i18n_message={localize('View all transactions on your account, including trades, deposits, and withdrawals.')}\n                    filter_component={filter_component}\n                />\n                { (is_loading && data.length === 0) || is_empty ?\n                    <PlaceholderComponent\n                        is_loading={is_loading}\n                        has_selected_date={has_selected_date}\n                        is_empty={is_empty}\n                        empty_message_component={EmptyTradeHistoryMessage}\n                        component_icon={component_icon}\n                        localized_message={localize('You have no transactions yet.')}\n                        localized_period_message={localize('You have no transactions for this period.')}\n                    />\n                    :\n                    <DataTable\n                        className='statement'\n                        data_source={data}\n                        columns={columns}\n                        onScroll={handleScroll}\n                        getRowAction={(row) => this.getRowAction(row)}\n                        is_empty={is_empty}\n                    >\n                        <PlaceholderComponent\n                            is_loading={is_loading}\n                        />\n                    </DataTable>\n                }\n            </React.Fragment>\n        );\n    }\n}\n\nStatement.propTypes = {\n    component_icon   : PropTypes.string,\n    data             : MobxPropTypes.arrayOrObservableArray,\n    date_from        : PropTypes.number,\n    date_to          : PropTypes.number,\n    error            : PropTypes.string,\n    handleScroll     : PropTypes.func,\n    has_selected_date: PropTypes.bool,\n    history          : PropTypes.object,\n    is_empty         : PropTypes.bool,\n    is_loading       : PropTypes.bool,\n    onMount          : PropTypes.func,\n    onUnmount        : PropTypes.func,\n};\n\nexport default connect(\n    ({ modules, client }) => ({\n        currency         : client.currency,\n        date_from        : modules.statement.date_from,\n        date_to          : modules.statement.date_to,\n        data             : modules.statement.data,\n        error            : modules.statement.error,\n        handleScroll     : modules.statement.handleScroll,\n        handleDateChange : modules.statement.handleDateChange,\n        has_selected_date: modules.statement.has_selected_date,\n        is_empty         : modules.statement.is_empty,\n        is_loading       : modules.statement.is_loading,\n        onMount          : modules.statement.onMount,\n        onUnmount        : modules.statement.onUnmount,\n    })\n)(withRouter(Statement));\n"],"sourceRoot":""}